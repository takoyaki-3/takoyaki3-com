name: OpenHands Resolver Bot (Gemini)

on:
  issues:
    types: [labeled]
  pull_request:
    types: [labeled]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: openhands-resolver-${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: false

jobs:
  call-openhands-resolver:
    # ラベル or マクロでのみ起動
    if: |
      (github.event_name == 'issues' && github.event.action == 'labeled' &&
        github.event.label.name == (vars.TRIGGER_LABEL || 'openhands')) ||
      (github.event_name == 'pull_request' && github.event.action == 'labeled' &&
        github.event.label.name == (vars.TRIGGER_LABEL || 'openhands')) ||
      (github.event_name == 'issue_comment' &&
        contains(github.event.comment.body, (vars.OPENHANDS_MACRO || '@openhands-agent'))) ||
      (github.event_name == 'pull_request_review_comment' &&
        contains(github.event.comment.body, (vars.OPENHANDS_MACRO || '@openhands-agent'))) ||
      (github.event_name == 'pull_request_review' && github.event.action == 'submitted' &&
        github.event.review.body && contains(github.event.review.body, (vars.OPENHANDS_MACRO || '@openhands-agent')))
    uses: All-Hands-AI/OpenHands/.github/workflows/openhands-resolver.yml@main
    with:
      macro: ${{ vars.OPENHANDS_MACRO || '@openhands-agent' }}
      max_iterations: ${{ vars.OPENHANDS_MAX_ITER || '50' }}
      base_container_image: ${{ vars.OPENHANDS_BASE_CONTAINER_IMAGE || '' }}

      # ★ Gemini を使用
      # OpenHands 側のモデル指定は `<provider>/<model>` 形式
      # 例: google/gemini-2.5-pro または google/gemini-2.5-flash
      LLM_MODEL: ${{ vars.LLM_MODEL || 'google/gemini-2.5-pro' }}

      target_branch: ${{ vars.TARGET_BRANCH || 'main' }}
      runner: ${{ vars.TARGET_RUNNER || 'ubuntu-latest' }}
    secrets:
      PAT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PAT_USERNAME: ${{ secrets.PAT_USERNAME }}
      # ★ Gemini の API キーを渡す（リポジトリ側で `GEMINI_API_KEY` を用意しておく）
      LLM_API_KEY: ${{ secrets.GEMINI_API_KEY }}
